DAY 1 (June 23, 2025) - GitHub Setup and Basics

Made a GitHub account.

Clicked on the "+" icon in the top bar and chose "New repository".

Gave it a name, ticked "Add README", and created it.

Basically, made an online folder for our code.

Local Repo Stuff:

Local repo = copy of online (remote) repo on my PC.

To use Git, first linked my GitHub account to my PC (using git config).

Every time we push (upload) code, Git asks for login, so...

Created a PAT (Personal Access Token):

Profile > Settings > Developer Settings > Tokens (classic)

Created one with "No Expiry" and selected "repo" permissions.

Copied it and mailed it to myself (so I don’t lose it!).

DAY 2 (June 24, 2025) - Installations and Git Commands

Installed:

VS Code

Git

Notepad++

Python

Tip: Moved all installer files to a folder in C drive called "software".
Created another folder called "learning" in D drive for all course code.

Git Config:

git config --global user.name "your_name"

git config --global user.email "your_email"

Cloned Repo:

git clone <url>

OR use PAT like git clone https://<PAT>@github.com/username/repo

Git Push Flow:

git add .

git commit -m "message"

git push origin main

DAY 3 - Python Intro + Operators

Python syntax is super readable, feels like English.

Arithmetic Operators:

+, -, *, /, %, // (floor division), ** (power)

Operate left to right. Precedence: ** > *, /, %, // > +, -

Relational Operators:



, <, >=, <=, ==, !=

Return True or False

Logical Operators:

and, or, not

Short-circuiting: if first condition is False in 'and', Python doesn't check the second one.

Number Storage:

Positives: converted to binary directly.

Negatives: convert to binary and apply 2’s complement.

DAY 4 - Functions + Built-ins

Python functions are easy.

range() gives numbers in a range.

Other built-ins: input(), print(), len(), min(), max(), sorted()

DAY 5 - Lists

Python Lists:

Ordered and mutable (can change values).

Can hold mixed data types.

Lookup is fast (O(1)).

List Problems Solved:

Smallest and biggest elements.

Frequency of an element.

Remove duplicates.

Get next bigger number with same digits.

Kaprekar's constant recursion count (4-digit number).

Recursion Practice:

Factorial

Fibonacci

Sum of list elements

DAY 6 - Data Structures Using Lists

Stack Using List:

Add/remove from rear: append() and pop()

Or from front: insert(0, val) and pop(0)

Queue Using List:

Typical Queue: Insert rear, delete front.

Can also try: Insert front, delete rear.

DAY 7 - OOP in Python

OOP Concepts:

Inheritance: Derived class gets stuff from Base class.

Polymorphism: Same function name, different behavior.

Encapsulation: Grouping data + methods.

Abstraction: Hiding internal details.

Python Specifics:

Use _ for private variables.

super() calls methods from base class.

No function overloading in Python (because no compile time).

DAY 9 - Sorting (Bubble + Selection Sort)

Bubble Sort:

Compares adjacent elements and swaps if needed.

Repeats until list is sorted.

If no swaps in a pass, it’s already sorted.

Time complexity: Best case O(n), Worst case O(n^2)

Selection Sort:

Find the smallest in unsorted part and put it in the right place.

O(n^2), not very efficient.

Brute Force Technique:

No smart guesswork, just plain logic.

DAY 10 - Binary Search Tree (BST)

A tree where every left child is smaller than the node and right child is bigger.

Insertion always happens at a leaf.

Deletion:

No child → just remove it.

One child → link parent to child.

Two children → replace with smallest in right subtree.

DAY 11 - PDB Debugging (Python Debugger)

Helps stop code at certain lines and check what’s going on.

Use import pdb; pdb.set_trace() in the script.

Commands like:

n (next)

c (continue)

q (quit)

p var (print variable)

DAY 12 - NumPy Basics

Creating Arrays:

np.array([1, 2, 3])

np.zeros((2, 3)) → matrix of 0s

np.ones((3, 4)) → matrix of 1s

np.full((2, 2), 7) → all 7s

np.arange(1, 10) → range values

np.reshape() → change shape

Matrix Math:

+, -, *, / work element-wise

np.dot(a, b) for matrix multiplication

Shape & Indexing:

Use .shape to check size

2D arrays can be indexed with [row][col] or [row, col]

Broadcasting:

NumPy auto-expands scalars to match shape of arrays (e.g., add 5 to every element)

DAY 13 - NumPy Advanced

Random & Normalization:

np.random.random((3, 3)) → random values between 0 and 1

Normalize: (arr - mean) / std

Slicing:

arr[1:3, :] → rows 1 & 2, all columns

arr[:, [0, -1]] = 0 → make 1st & last column zero

DAY 14 - Function Pointers + Closures

Functions can return functions in Python.

def outer(): def inner(): return ...

Closures remember the enclosing variable.

Also saw how C-style function pointers look in Python.

DAY 15 - Pandas Basics

import pandas as pd

pd.Series() for 1D labeled data

pd.DataFrame() for 2D table-like data

Load CSV: pd.read_csv('file.csv')

Save CSV: df.to_csv('output.csv')

Useful Ops:

df.head(), df.tail(), df.info(), df.describe()

df['column'] to access a column

df.loc[], df.iloc[] for row access

DAY 16 - Regex in Python

import re

re.match(), re.search(), re.findall()

Patterns:

. = any char

* = 0 or more

+ = 1 or more

[] = match set

^ = starts with, $ = ends with

Example:

re.findall(r'\d+', 'abc123def456') → ['123', '456']

DAY 17 - Flask Basics

pip install flask

First app:

from flask import Flask
app = Flask(__name__)

@app.route('/')
def home():
    return 'Hello, Flask!'

app.run(debug=True)

Flask Notes:

@app.route() defines URL path

render_template() to return HTML

Flask auto-reloads with debug=True

Can pass data to HTML using Jinja2 templating